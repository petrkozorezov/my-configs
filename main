;; ================ Reload =====================
;; Reload .emacs file by typing: Mx reload.
(defun reload () "Reloads .emacs interactively."
(interactive)
(load "~/.emacs"))

;; ================ Color theme ================
(require 'color-theme)
(load-file "~/emacs/color-themes/color-theme-tango.el")
(color-theme-tango)

;; =============== Fullscreen ==================
(defun toggle-fullscreen (&optional f)
   (interactive)
   (let ((current-value (frame-parameter nil 'fullscreen)))
        (set-frame-parameter nil 'fullscreen
                             (if (equal 'fullboth current-value)
                                 (if (boundp 'old-fullscreen) old-fullscreen nil)
                                 (progn (setq old-fullscreen current-value)
                                    'fullboth)))))
(global-set-key [f11] 'toggle-fullscreen)
; Make new frames fullscreen by default. Note: this hook doesn't do
; anything to the initial frame if it's in your .emacs, since that file is
; read _after_ the initial frame is created.
(add-hook 'after-make-frame-functions 'toggle-fullscreen)

;; ================ Erlang mode ================
(add-to-list 'load-path ".....")
(require 'erlang-start)

(add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.hrl?$" . erlang-mode))

(setq erlang-root-dir "/usr/lib/erlang")
(add-to-list 'exec-path "/usr/lib/erlang/bin")
(setq erlang-man-root-dir "/usr/lib/erlang/man")

(defun my-erlang-mode-hook ()
        ;; when starting an Erlang shell in Emacs, default in the node name
        (setq inferior-erlang-machine-options '("-sname" "emacs"))
        ;; add Erlang functions to an imenu menu
        (imenu-add-to-menubar "imenu")
        ;; customize keys
        (local-set-key [return] 'newline-and-indent)
        ;;(erlang-shell-display)
        )
;; Some Erlang customizations
(add-hook 'erlang-mode-hook 'my-erlang-mode-hook)


;; ================ Distel ====================
(add-to-list 'load-path "~/emacs/distel/share/distel/elisp")
(require 'distel)
(distel-setup)

;; A number of the erlang-extended-mode key bindings are useful in the shell too
(defconst distel-shell-keys
  '(("\C-\M-i"   erl-complete)
    ("\M-?"      erl-complete)
    ("\M-."      erl-find-source-under-point)
    ("\M-,"      erl-find-source-unwind)
    ("\M-*"      erl-find-source-unwind)
    )
  "Additional keys to bind when in Erlang shell.")

;; =============== FlyMake ===================
(require 'flymake)

(defun flymake-erlang-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy 'flymake-create-temp-inplace))
         (local-file (file-relative-name temp-file
                                         (file-name-directory buffer-file-name))))
      (list "~/emacs/flymake/erlang" (list buffer-file-name))))


(add-to-list 'flymake-allowed-file-name-masks '("\\.erl\\'" flymake-erlang-init))
(add-hook 'find-file-hook 'flymake-find-file-hook)

;; =============== Esense =====================
;;(add-to-list 'load-path "~/emacs/esense")
;;(require 'esense-start)
;;
;;(setq esense-indexer-program "~/emacs/esense/esense.sh")


;; =============== Speedbar ===================
(speedbar 1)
(speedbar-add-supported-extension ".erl")
(speedbar-add-supported-extension ".hrl") 
(speedbar-add-supported-extension ".sh")
(speedbar-add-supported-extension ".thrift")
(speedbar-add-supported-extension ".js")

;; =============== Thrift =====================
(load "~/emacs/thrift-mode.el")
(require 'thrift-mode)

(add-to-list 'auto-mode-alist '("\\.thrift?$" . trift-mode))

;; =============== Others =====================
(setq-default tab-width 4)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "#2e3436" :foreground "#eeeeec" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "unknown" :family "DejaVu Sans Mono")))))

(defun open-lego ()
  (interactive)
  (cd "~/Desktop/Workspaces/Erlang1/lego_game_server1")
  (speedbar-update-contents)
)
